import{b as _,e as x,f as S,G as q,Q as P,H as R,au as w,J as c,p as A,n as j,q as E,s as C,a9 as N,j as o,d as n,t as a}from"./index-DUPkHx4d.js";import{A as L}from"./AssociationBlock-CJN7E4hM.js";import{C as O}from"./CodeEditor-DKe39_o0.js";import{F as W}from"./FileInput-DVzclvOu.js";import{S as B}from"./SidePanelFormButtons-CNwjaqPr.js";import{u as U}from"./useGetWslInstanceTypes-t0dQkgFx.js";import"./WslInstancesEmptyState-CWAo-htp.js";import{u as k}from"./useRoles-BTRRn_zj.js";import{M as v,R as G,C as V,F as D}from"./constants-CGmSpzVx.js";import"./MultiSelectField-CDANfO7B.js";import"./useGetTags-DxnkmDTP.js";import"./index-C9wSI7KK.js";import"./SidePanelFormButtons.module-BuIu-Bem.js";import"./GroupFilter-CsdP_gCW.js";import"./HeaderWithSearch-BLl1UREi.js";import"./useExpandableRow-CoSPblV4.js";const M=()=>{const t=_(),s=x(),{isPending:r,mutateAsync:l}=S({mutationFn:async d=>t.post("child-instance-profiles",d),onSuccess:async()=>s.invalidateQueries({queryKey:["wslProfiles"]})});return{isAddingWslProfile:r,addWslProfile:l}},$=()=>q().shape({title:c().required("This field is required"),access_group:c().required("This field is required"),description:c().required("This field is required"),instanceType:c().required("This field is required"),rootfsImage:c().when("instanceType",{is:"custom",then:t=>t.required("This field is required"),otherwise:t=>t.notRequired()}),customImageName:c().when("instanceType",{is:"custom",then:t=>t.required("This field is required").test("not-match-reserved-patterns","Instance name cannot match 'ubuntu', 'ubuntu-preview', or 'ubuntu-<dd>.<dd>'",s=>!G.some(r=>r.test(s.toLowerCase()))),otherwise:t=>t.notRequired()}),cloudInitType:c(),cloudInit:w().nullable().when("cloudInitType",{is:t=>t==="file"||t==="text",then:t=>t.required("This field is required").test("file-size","File size must be less than 1MB",s=>(typeof s=="string"&&(s=p(s)),s?s.size===void 0?!1:s.size<=v*1024*1024:!0)),otherwise:t=>t.notRequired()}),all_computers:R(),tags:P().of(c())}),p=t=>{const s=new Blob([t],{type:"application/x-yaml"});return new File([s],"myFile.yaml",{type:"application/x-yaml"})},Q=t=>{if(t)return new Promise((s,r)=>{const l=new FileReader;l.readAsDataURL(t),l.onload=()=>{s(l.result)},l.onerror=d=>{r(d)}})},z=async t=>{if(t===null)return;let s;typeof t=="string"?s=p(t):s=t;const r=await Q(s);return r?r.split(",")[1]:void 0},H="_block_tz139_1",X={block:H},fe=()=>{const t=A(),{closeSidePanel:s}=j(),{notify:r}=E(),{getAccessGroupQuery:l}=k(),{addWslProfile:d}=M(),{data:m}=l(),{isGettingWslInstanceTypes:f,wslInstanceTypes:g}=U(),y=g.map(({label:i,name:u})=>({label:i,value:u}))||[],I=[{label:"Select",value:""},...y,{label:"From URL",value:"custom"}],h=m?.data.map(({name:i,title:u})=>({label:u,value:i}))??[],e=C({initialValues:{title:"",access_group:N,description:"",instanceType:"",customImageName:"",rootfsImage:"",cloudInitType:"",cloudInit:null,all_computers:!1,tags:[]},onSubmit:async i=>{try{const u=await z(i.cloudInit),F=(await d({title:i.title,access_group:i.access_group,description:i.description,image_name:i.instanceType==="custom"?i.customImageName:i.instanceType,image_source:i.rootfsImage,cloud_init_contents:u,all_computers:i.all_computers,tags:i.tags})).data.computers.constrained.length;s(),r.success({title:`Profile "${i.title}" added successfully`,message:`It has been associated with ${F} instances`})}catch(u){t(u)}},validationSchema:$()}),b=async i=>{await e.setFieldValue("cloudInit",i[0])},T=async()=>{await e.setFieldValue("cloudInit",null)};return o.jsxs(n.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[o.jsx(n.Input,{type:"text",label:"Title",required:!0,...e.getFieldProps("title"),error:a(e,"title")}),o.jsx(n.Input,{type:"text",label:"Description",required:!0,...e.getFieldProps("description"),error:a(e,"description")}),o.jsx(n.Select,{label:"Access group","aria-label":"Access group",required:!0,options:h,...e.getFieldProps("access_group"),error:a(e,"access_group")}),o.jsxs("div",{className:X.block,children:[(e.values.instanceType!==""||e.values.cloudInitType!=="")&&o.jsx(n.Notification,{severity:"caution",title:"Warning",children:o.jsx("span",{children:"Once the profile is added, you cannot modify the rootfs image or cloud-init file."})}),o.jsx(n.Select,{label:"Rootfs image",disabled:f,"aria-label":"Rootfs image",options:I,required:!0,...e.getFieldProps("instanceType"),error:a(e,"instanceType")}),e.values.instanceType==="custom"&&o.jsxs(o.Fragment,{children:[o.jsx(n.Input,{label:"Image name",type:"text",required:!0,...e.getFieldProps("customImageName"),error:a(e,"customImageName")}),o.jsx(n.Input,{type:"text",label:"Rootfs image URL",required:!0,...e.getFieldProps("rootfsImage"),error:a(e,"rootfsImage"),help:"The file path must be reachable by the affected WSL instances."})]}),o.jsx(n.Select,{label:"Cloud-init","aria-label":"Cloud-init",options:V,...e.getFieldProps("cloudInitType"),error:a(e,"cloudInitType")}),e.values.cloudInitType==="file"&&o.jsx(W,{label:"Upload cloud-init",labelClassName:"u-off-screen",accept:".yaml",...e.getFieldProps("cloudInit"),onFileRemove:T,onFileUpload:b,help:D,error:a(e,"cloudInit")}),e.values.cloudInitType==="text"&&o.jsx(O,{label:"Cloud-init configuration",onChange:i=>{e.setFieldValue("cloudInit",i??"")},value:e.values.cloudInit??"",language:"yaml",defaultValue:"# paste cloud-init config here",error:a(e,"cloudInit")})]}),o.jsx(L,{formik:e}),o.jsx(B,{submitButtonText:"Add WSL profile",submitButtonAriaLabel:"Add a new WSL profile",submitButtonDisabled:e.isSubmitting})]})};export{fe as default};

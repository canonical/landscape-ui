import{G as K,H as w,R as y,J as l,B as n,ad as I,i as _,p as z,n as Q,s as W,j as s,d as a,t as o,ag as P}from"./index-DZF0LgVk.js";import{C as F}from"./CheckboxGroup-C82d8H13.js";import{S as J}from"./SidePanelFormButtons-D2oVguFC.js";import{U as Y}from"./UdebCheckboxInput-lYsQ7gMM.js";import{u as X}from"./useGPGKeys-DxynM_91.js";import{M as x,S as b,I as v,e as d,a as Z,u as ee,h as te,C as se,A as re,i as S,P as k,g as E,D as C,j as V}from"./constants-D5a5Fkqb.js";import{t as j}from"./tests-DFnZqbNV.js";import"./SidePanelFormButtons.module-BuIu-Bem.js";const ae=u=>u.replace(/\/[^\\/@]*@/,"/"),ie=u=>u?{...v,distribution:u.name}:v,oe=(u,m)=>K().shape({distribution:l().required("This field is required."),type:l().required("This field is required."),name:l().required("This field is required.").test({test:j.test,message:j.message}).test({test:(i,r)=>!!r.parent.distribution,message:"First select the distribution."}).test({params:{distribution:m,distributions:u},test:(i,r)=>r.parent.distribution?!(m?m.series.map(({name:p})=>p):u.find(({name:p})=>p===r.parent.distribution)?.series.map(({name:p})=>p))?.includes(i):!0,message:"It must be unique within series within the distribution."}),hasPockets:w(),mirror_series:l(),mirror_gpg_key:l(),mirror_uri:l().when("hasPockets",([i],r)=>i?r.nonNullable().required("This field is required."):r),snapshotDate:l().when("type",([i],r)=>i==="ubuntu-snapshot"?r.required("This field is required.").test({test:g=>n(g).isBetween(n(b),n()),message:`The date must be after ${n(b).format(I)} and not in the future.`}):r),gpg_key:l().when("hasPockets",([i],r)=>i?r.required("This field is required."):r),pockets:y().of(l()),components:y().of(l()).when("hasPockets",([i],r)=>i?r.min(x,"Please choose at least one component."):r),architectures:y().of(l()).when("hasPockets",([i],r)=>i?r.min(x,"Please choose at least one architecture."):r),include_udeb:w().required()}),ge=({distribution:u,ctaText:m="Add mirror"})=>{const[i,r]=_.useState(d),[g,p]=_.useState([]),A=z(),{closeSidePanel:q}=Q(),{getGPGKeysQuery:D}=X(),{createSeriesQuery:R,getRepoInfo:O}=Z(),{getDistributionsQuery:N}=ee(),{data:U}=N({include_latest_sync:!0},{enabled:!u}),f=U?.data??[],{data:M}=D(),{mutateAsync:G}=R,T=M?.data??[],L=f.map(({name:t})=>({label:t,value:t})),e=W({initialValues:ie(u),validationSchema:oe(f,u),onSubmit:async t=>{try{await G({name:t.name,distribution:t.distribution,mirror_series:t.mirror_series,gpg_key:t.gpg_key,include_udeb:t.include_udeb,mirror_uri:t.mirror_uri,components:t.components,pockets:t.pockets,architectures:t.architectures,mirror_gpg_key:t.mirror_gpg_key}),q()}catch(c){A(c)}}}),$=async t=>{await e.setFieldValue("snapshotDate",t.target.value),await e.setFieldValue("mirror_uri",`${C}/${n(t.target.value).format(V)}`)},B=async t=>{await e.setFieldValue("type",t.target.value),t.target.value==="ubuntu"?(await e.setFieldValue("mirror_uri",d),await e.setFieldValue("pockets",S.ubuntu),await e.setFieldValue("hasPockets",!0),await e.setFieldValue("components",k.ubuntu),await e.setFieldValue("architectures",E.ubuntu),e.values.mirror_uri?.startsWith(d)||await e.setFieldValue("mirror_uri",d),r(d)):t.target.value==="third-party"?(await e.setFieldValue("mirror_uri",""),await e.setFieldValue("pockets",S.thirdParty),await e.setFieldValue("hasPockets",!0),await e.setFieldValue("components",k.thirdParty),await e.setFieldValue("architectures",E.thirdParty),r("")):t.target.value==="ubuntu-snapshot"&&(await e.setFieldValue("mirror_uri",`${C}/${n(e.values.snapshotDate).format(V)}`),await e.setFieldValue("pockets",S.ubuntu),await e.setFieldValue("hasPockets",!0),await e.setFieldValue("components",k.ubuntu),r(d))},H=async t=>{const{value:c}=t.target;await e.setFieldValue("mirror_series",c),!(!c||e.values.name)&&await e.setFieldValue("name",e.values.type==="ubuntu-snapshot"?`${c}-snapshot-${n(e.values.snapshotDate).format(P)}`:c)},{data:{data:h}={data:void 0}}=O({mirror_uri:ae(i)},{enabled:!!i});return _.useEffect(()=>{if(!h){p([]);return}h.ubuntu?e.values.mirror_uri?.startsWith(d)&&e.setFieldValue("type","ubuntu"):e.setFieldValue("type","third-party"),p(h.repos.map(({description:t,repo:c})=>({label:h.ubuntu?t:c,value:c})))},[h]),s.jsxs(a.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[s.jsx(a.Select,{label:"Type",required:!0,options:[{label:"Ubuntu Archive",value:"ubuntu"},{label:"Ubuntu Snapshot",value:"ubuntu-snapshot"},{label:"Third party",value:"third-party"}],...e.getFieldProps("type"),onChange:B,error:o(e,"type")}),e.values.type!=="ubuntu-snapshot"?s.jsx(a.Input,{type:"text",label:"Mirror URI",required:e.values.hasPockets,help:"Absolute URL or file path",...e.getFieldProps("mirror_uri"),onBlur:t=>{r(t.target.value)},error:o(e,"mirror_uri")}):s.jsx(a.Input,{type:"date",min:n(b).format(P),max:n().format(P),label:"Snapshot date",required:!0,...e.getFieldProps("snapshotDate"),onChange:$,error:o(e,"snapshotDate"),help:`Starting from approximately ${n(b).format(I)} in dd.mm.yyyy format`}),!u&&s.jsx(a.Select,{label:"Distribution",required:!0,options:[{label:"Select distribution",value:""},...L],...e.getFieldProps("distribution"),error:o(e,"distribution")}),s.jsxs(a.Row,{className:"u-no-padding",children:[s.jsx(a.Col,{size:6,medium:3,small:2,children:s.jsx(a.Select,{label:"Mirror series",options:[{label:"Select series",value:""},...g],...e.getFieldProps("mirror_series"),onChange:H,error:o(e,"mirror_series")})}),s.jsx(a.Col,{size:6,medium:3,small:2,children:s.jsx(a.Input,{type:"text",label:"Series name",required:!0,...e.getFieldProps("name"),error:o(e,"name")})})]}),s.jsxs(a.Row,{className:"u-no-padding",children:[e.values.type!=="ubuntu-snapshot"&&s.jsx(a.Col,{size:6,medium:3,small:2,children:s.jsx(a.Select,{label:"Mirror GPG key",options:[{label:"Select mirror GPG key",value:""},...T.filter(({has_secret:t})=>!t).map(({name:t})=>({label:t,value:t}))],...e.getFieldProps("mirror_gpg_key"),error:o(e,"mirror_gpg_key"),help:"If none is given, the stock Ubuntu archive one will be used."})}),s.jsx(a.Col,{size:6,medium:3,small:2,children:s.jsx(a.Select,{label:"GPG key",required:e.values.hasPockets,options:[{label:"Select GPG key",value:""},...T.filter(({has_secret:t})=>t).map(({name:t})=>({label:t,value:t}))],...e.getFieldProps("gpg_key"),error:o(e,"gpg_key")})})]}),e.values.type!=="third-party"?s.jsxs(s.Fragment,{children:[s.jsx(F,{label:"Pockets",style:{marginTop:"1.5rem"},options:te,...e.getFieldProps("pockets"),onChange:async t=>{await e.setFieldValue("pockets",t),await e.setFieldValue("hasPockets",!!t.length)},error:o(e,"pockets")}),s.jsx(F,{label:"Components",required:e.values.hasPockets,options:se,...e.getFieldProps("components"),onChange:async t=>{await e.setFieldValue("components",t)},error:o(e,"components")}),s.jsx(F,{label:"Architectures",required:e.values.hasPockets,options:re,...e.getFieldProps("architectures"),onChange:async t=>{await e.setFieldValue("architectures",t)},error:o(e,"architectures")})]}):s.jsxs(s.Fragment,{children:[s.jsx(a.Input,{type:"text",label:"Pockets",placeholder:"E.g. releases, security, etc.",...e.getFieldProps("pockets"),value:e.values.pockets.join(","),onChange:async t=>{await e.setFieldValue("pockets",t.target.value.replace(/\s/g,"").split(",")),await e.setFieldValue("hasPockets",!!t.target.value)},error:o(e,"pockets"),help:"List the pocket names separated by commas."}),s.jsx(a.Input,{type:"text",label:"Components",required:e.values.hasPockets,placeholder:"E.g. main, universe, etc.",...e.getFieldProps("components"),value:e.values.components.join(","),onChange:async t=>{await e.setFieldValue("components",t.target.value.replace(/\s/g,"").split(","))},error:o(e,"components"),help:"List the component names separated by commas."}),s.jsx(a.Input,{type:"text",label:"Architectures",required:e.values.hasPockets,placeholder:"E.g. amd64, riscv, etc.",...e.getFieldProps("architectures"),value:e.values.architectures.join(","),onChange:async t=>{await e.setFieldValue("architectures",t.target.value.replace(/\s/g,"").split(","))},error:o(e,"architectures"),help:"List the architectures separated by commas."})]}),s.jsx(Y,{formik:e}),s.jsx(J,{submitButtonDisabled:e.isSubmitting,submitButtonText:m})]})};export{ge as default};

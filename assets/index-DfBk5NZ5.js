import{M as K,U as h,O as F,P as d,B as N,o as V,F as q,j as i,d as c,G as p}from"./index-W6vPPLJL.js";import{C as x,U as D}from"./UdebCheckboxInput-DBw-UL2i.js";import{a as L,u as Q,F as B}from"./debug-BhE6wqug.js";import{M as $}from"./MultiSelectField-pxDJB9j6.js";import{S as H}from"./SidePanelFormButtons-m4F_GuJu.js";import{e as W,M as P,f as z,C as J,A as X,D as Y}from"./constants-BFDufbMQ.js";import"./useGPGKeys-BlyGp4Up.js";import"./SidePanelFormButtons.module-BuIu-Bem.js";const Z={series:"",distribution:"",name:"",architectures:[],components:[],gpg_key:"",include_udeb:!1,mirror_uri:W,upload_allow_unsigned:!1,mirror_suite:"",mirror_gpg_key:"",filters:[],upload_gpg_keys:[]},v=e=>K().shape({name:d().required("This field is required"),distribution:d().required("This field is required"),series:d().required("This field is required"),components:h().defined().of(d().defined()).min(P,"Please choose at least one component").test({name:"flat-mirror-sub-directory",message:"A single component must be passed",params:{mode:e},test:(s,n)=>{const{mirror_suite:m}=n.parent;return e==="mirror"&&m.endsWith("/")?P===s.length:!0}}),architectures:h().defined().of(d().defined()).min(P,"Please choose at least one architecture"),gpg_key:d(),include_udeb:F(),mirror_uri:d(),mirror_suite:d(),mirror_gpg_key:d(),upload_allow_unsigned:F(),filters:h().of(d()),upload_gpg_keys:h().of(d())}),ee=(e,s,n)=>{const m={...Z,distribution:e,series:s,name:n.name,components:n.components,architectures:n.architectures,gpg_key:n.gpg_key?.name??"",include_udeb:n.include_udeb};switch(n.mode){case"mirror":return{...m,mirror_uri:n.mirror_uri,mirror_suite:n.mirror_suite,mirror_gpg_key:n.mirror_gpg_key?.name??""};case"upload":return{...m,upload_allow_unsigned:n.upload_allow_unsigned,upload_gpg_keys:n.upload_gpg_keys.map(({name:b})=>b)};default:return{...m,filters:n.filters}}},re=(e,s)=>{switch(s){case"mirror":return{distribution:e.distribution,series:e.series,name:e.name,components:e.components,architectures:e.architectures,gpg_key:e.gpg_key,include_udeb:e.include_udeb,mirror_uri:e.mirror_uri,mirror_suite:e.mirror_suite,mirror_gpg_key:e.mirror_gpg_key};case"upload":return{distribution:e.distribution,series:e.series,name:e.name,components:e.components,architectures:e.architectures,gpg_key:e.gpg_key,include_udeb:e.include_udeb,upload_allow_unsigned:e.upload_allow_unsigned};case"pull":return{distribution:e.distribution,series:e.series,name:e.name,components:e.components,architectures:e.architectures,gpg_key:e.gpg_key,include_udeb:e.include_udeb};default:return L(s,"pocket mode")}},ue=({distributionName:e,pocket:s,seriesName:n})=>{const m=N(),{closeSidePanel:b}=V(),{editPocketQuery:G,addPackageFiltersToPocketQuery:w,removePackageFiltersFromPocketQuery:j,addUploaderGPGKeysToPocketQuery:T,removeUploaderGPGKeysFromPocketQuery:U}=z(),{mutateAsync:I}=G,{mutateAsync:S}=w,{mutateAsync:A}=j,{mutateAsync:C}=T,{mutateAsync:O}=U,{privateGPGKeysOptions:E,publicGPGKeysOptions:f}=Q(),{mode:k}=s,R=async(t,a,o)=>{const l=[t],g=a.filters.filter(u=>!o.filters.includes(u)),_=o.filters.filter(u=>u).filter(u=>!a.filters.includes(u));return g.length&&l.push(A({name:o.name,distribution:o.distribution,series:o.series,packages:g})),_.length&&l.push(S({name:o.name,distribution:o.distribution,series:o.series,packages:_})),Promise.all(l)},M=async(t,a,o)=>{const l=[];a.upload_allow_unsigned?await t:l.push(t);const g=a.upload_gpg_keys.map(({name:y})=>y),_=o.upload_gpg_keys.filter(y=>!g.includes(y)),u=g.filter(y=>!o.upload_gpg_keys.includes(y));return _.length&&l.push(C({name:o.name,series:o.series,distribution:o.distribution,gpg_keys:_})),u.length&&l.push(O({name:o.name,series:o.series,distribution:o.distribution,gpg_keys:u})),Promise.all(l)},r=q({validationSchema:v(k),initialValues:ee(e,n,s),onSubmit:async t=>{try{const a=I(re(t,k));s.mode==="pull"&&s.filter_type?await R(a,s,t):s.mode==="upload"&&!t.upload_allow_unsigned?await M(a,s,t):await a,b()}catch(a){m(a)}}});return i.jsxs(c.Form,{onSubmit:r.handleSubmit,noValidate:!0,children:[i.jsx(x,{label:"Components",required:!0,options:J,...r.getFieldProps("components"),onChange:t=>{r.setFieldValue("components",t)},error:p(r,"components")}),i.jsx(x,{label:"Architectures",required:!0,options:X,...r.getFieldProps("architectures"),onChange:t=>{r.setFieldValue("architectures",t)},error:p(r,"architectures")}),i.jsx(c.Select,{label:"GPG Key",options:E,...r.getFieldProps("gpg_key"),error:p(r,"gpg_key")}),s.mode==="mirror"&&!s.mirror_uri.startsWith(Y)&&i.jsxs(i.Fragment,{children:[i.jsx(c.Input,{type:"text",label:"Mirror URI",...r.getFieldProps("mirror_uri"),error:p(r,"mirror_uri")}),i.jsx(c.Input,{type:"text",label:i.jsx(B,{label:"Mirror suite",description:i.jsxs(i.Fragment,{children:[i.jsx("span",{children:"The specific sub-directory under dists/ that should be mirrored. If the suite name ends with a ‘/’, the remote repository is flat (no dists/ structure, see "}),i.jsx("a",{href:"http://wiki.debian.org/RepositoryFormat#Flat_Repository_Format",target:"_blank",rel:"nofollow noopener noreferrer",children:"wiki.debian.org/RepositoryFormat#Flat_Repository_Format"}),i.jsx("span",{children:"); in this case a single value must be passed for the ‘components’ parameter. Packages from the remote repository will be mirrored in the specified component. This parameter is optional and defaults to the same name as local series and pocket."})]})}),...r.getFieldProps("mirror_suite"),error:p(r,"mirror_suite")}),i.jsx(c.Select,{label:"Mirror GPG key",options:[{label:"Select GPG key",value:"-"},...f],...r.getFieldProps("mirror_gpg_key"),error:p(r,"mirror_gpg_key"),help:"If none is given, the stock Ubuntu archive one will be used."})]}),s.mode==="upload"&&i.jsxs(i.Fragment,{children:[i.jsx(c.CheckboxInput,{label:"Allow uploaded packages to be unsigned",...r.getFieldProps("upload_allow_unsigned"),checked:r.values.upload_allow_unsigned}),i.jsx($,{variant:"condensed",label:"Uploader GPG keys",disabled:r.values.upload_allow_unsigned,items:f,selectedItems:f.filter(({value:t})=>r.values.upload_gpg_keys.includes(t)),onItemsUpdate:t=>{r.setFieldValue("upload_gpg_keys",t.map(({value:a})=>a))},error:r.touched.upload_gpg_keys&&(Array.isArray(r.errors.upload_gpg_keys)?r.errors.upload_gpg_keys.join(", "):r.errors.upload_gpg_keys)||void 0})]}),s.mode==="pull"&&s.filter_type&&i.jsx(c.Textarea,{label:"Filter packages",rows:3,help:"List packages to filter separated by commas.",...r.getFieldProps("filters"),onChange:t=>{r.setFieldValue("filters",t.target.value.replace(/\s/g,"").split(","))},value:r.values.filters.join(","),error:p(r,"filters")}),i.jsx(D,{formik:r}),i.jsx(H,{submitButtonDisabled:r.isSubmitting,submitButtonText:"Save changes"})]})};export{ue as default};

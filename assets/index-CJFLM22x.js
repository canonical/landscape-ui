import{o as w,p as F,f as S,q as x,s as v,h as _,k as m,G as q,j as i,g as a}from"./index-DBcAWqbv.js";import{F as L}from"./FileInput-D8zRWdAh.js";import{S as R}from"./SidePanelFormButtons-C9nokfTn.js";import{u as N}from"./index-CiLfP7PD.js";import{u as P}from"./WslInstancesHeader-Clu6vf0s.js";import"./SidePanelFormButtons.module-tJTvEwdD.js";import"./usePageParams-D5pJSJ3O.js";import"./TablePagination-whkkZrpm.js";import"./TablePaginationBase-Dr1jFaWe.js";import"./StatusFilter-C_Pj8bGk.js";import"./TableFilter-BTR0ILya.js";import"./TableFilterChips-Cyuq7biN.js";import"./useFetchOld-gBQ8Xnh7.js";import"./NoData-CRBDtP9O.js";import"./useInstances-CVYfdxOU.js";import"./HeaderWithSearch-1PqauBHy.js";try{let n=typeof window<"u"?window:typeof global<"u"?global:typeof globalThis<"u"?globalThis:typeof self<"u"?self:{},o=new n.Error().stack;o&&(n._sentryDebugIds=n._sentryDebugIds||{},n._sentryDebugIds[o]="6e6b1621-b5ae-47ad-8ba3-7712c85c88ee",n._sentryDebugIdIdentifier="sentry-dbid-6e6b1621-b5ae-47ad-8ba3-7712c85c88ee")}catch{}const j=[/^ubuntu$/,/^ubuntu-preview$/,/^ubuntu-[0-9]{2}\.[0-9]{2}$/],B=1,D=n=>{if(n)return new Promise((o,u)=>{const r=new FileReader;r.readAsDataURL(n),r.onload=()=>o(r.result),r.onerror=c=>u(c)})},J=()=>{const{instanceId:n}=w(),o=F(),{closeSidePanel:u}=S(),{notify:r}=x(),{createChildInstanceQuery:c,getWslInstanceNamesQuery:p}=P(),{openActivityDetails:b}=N(),{data:l,isLoading:f}=p(),{mutateAsync:y}=c,e=v({initialValues:{instanceType:"Ubuntu",cloudInit:null,instanceName:"",rootfs:""},validationSchema:_({instanceType:m().required("This field is required"),cloudInit:q().nullable().test("file-size","File size must be less than 1MB",t=>t?t.size===void 0?!1:t.size<=B*1024*1024:!0),instanceName:m().when("instanceType",{is:"custom",then:t=>t.required("This field is required").test("not-match-reserved-patterns","Instance name cannot match 'ubuntu', 'ubuntu-preview', or 'ubuntu-<dd>.<dd>'",s=>!j.some(d=>d.test(s.toLowerCase())))}),rootfs:m().url().when("instanceType",{is:"custom",then:t=>t.required("This field is required")})}),onSubmit:async t=>{try{const s=await D(t.cloudInit),d=s?s.split(",")[1]:void 0,{data:T}=await y({parent_id:parseInt(n??""),computer_name:t.instanceType==="custom"?t.instanceName:t.instanceType,rootfs_url:t.instanceType==="custom"?t.rootfs:void 0,cloud_init:d});u(),r.success({message:"You queued a new WSL instance to be installed",actions:[{label:"View details",onClick:()=>b(T)}]})}catch(s){o(s)}}}),I=[...((l==null?void 0:l.data)??[]).map(({label:t,name:s})=>({label:t,value:s}))||[],{label:"Custom",value:"custom"}],h=async t=>{await e.setFieldValue("cloudInit",t[0])},g=async()=>{await e.setFieldValue("cloudInit",null)};return i.jsxs(a.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[i.jsx(a.Select,{label:"Instance type",required:!0,disabled:f,options:I,...e.getFieldProps("instanceType"),error:e.touched.instanceType&&e.errors.instanceType?e.errors.instanceType:void 0}),e.values.instanceType==="custom"&&i.jsxs(i.Fragment,{children:[i.jsx(a.Input,{label:"Instance name",type:"text",required:!0,...e.getFieldProps("instanceName"),error:e.touched.instanceName&&e.errors.instanceName?e.errors.instanceName:void 0}),i.jsx(a.Input,{label:"Rootfs URL",type:"text",required:!0,...e.getFieldProps("rootfs"),error:e.touched.rootfs&&e.errors.rootfs?e.errors.rootfs:void 0})]}),i.jsx(L,{label:"Cloud-init",accept:".yaml",...e.getFieldProps("cloudInit"),onFileRemove:g,onFileUpload:h,help:"You can use a cloud-init configuration YAML file under 1MB to register new WSL instances. Cloud-init streamlines the setup by automating installation and configuration tasks.",error:e.touched.cloudInit&&e.errors.cloudInit?e.errors.cloudInit:void 0}),i.jsx(R,{submitButtonDisabled:e.isSubmitting,submitButtonText:"Install",submitButtonAriaLabel:"Install new WSL instance"})]})};export{J as default};

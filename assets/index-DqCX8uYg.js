import{e as j,n as x,f as O,g as _,r as E,j as G,h as V}from"./index-BhA4J3ko.js";import{c as C,b as h,a as b}from"./index.esm-B8rBEOcC.js";import{u as Q}from"./useRoles-Db1B50uX.js";import{g as w,a as B,b as I,c as k}from"./index-CTV2luAk.js";import{P as v,A as $}from"./AccessGroupBlock-B8HWkbTj.js";import{S as D}from"./SidePanelFormButtons-7JkHrlOz.js";import"./PageMain-BGNK0xG-.js";import"./useMutation-D6hW2Vr2.js";import"./useFetchOld-5foHVBsZ.js";import"./EmptyState-C71tSpTG.js";import"./TruncatedCell-CErqHQlr.js";import"./useConfirm-CiNGk-W0.js";import"./SidePanelFormButtons.module-yv6Qz3cN.js";const L=(e,o,d,p)=>{const t=e.permissions.filter(s=>p.find(({global:f,values:c})=>f&&(c.manage===s||c.view===s))),u=e.permissions.filter(s=>!t.includes(s)),i=u.filter(s=>!o.permissions.includes(s));i.includes("AddComputerToAccessGroup")&&i.push("RemoveComputerFromAccessGroup"),t.length>0&&i.push(...t);const n=o.permissions.filter(s=>!u.includes(s));n.includes("AddComputerToAccessGroup")&&n.push("RemoveComputerFromAccessGroup");const l=w(e.accessGroups,d),a=l.filter(s=>!o.access_groups.includes(s)),g=o.access_groups.filter(s=>!l.includes(s));return{accessGroupsToAdd:a,accessGroupsToRemove:g,permissionsToAdd:i,permissionsToRemove:n}},N=(e,o,d,p,t)=>{const{addAccessGroups:u,addPermissions:i,removeAccessGroups:n,removePermissions:l}=t,a={},{accessGroupsToAdd:g,accessGroupsToRemove:s,permissionsToAdd:f,permissionsToRemove:c}=L(e,o,d,p);return g.length>0&&(a.addAccessGroupsPromise=u({name:o.name,access_groups:g})),s.length>0&&(a.removeAccessGroupsPromise=n({name:o.name,access_groups:s})),c.length>0&&(a.removePermissionsPromise=l({name:o.name,permissions:c})),f.length>0&&(a.addPermissionsPromise=i({name:o.name,permissions:f})),a},M=(e,o,d)=>{const p=[...e.access_groups,...e.access_groups.flatMap(i=>{var n;return((n=o.find(({value:l})=>l===i))==null?void 0:n.children)||[]})],t=e.global_permissions?[...e.permissions,...e.global_permissions]:e.permissions,u=[...new Set([...t,...d.filter(({values:i})=>t.includes(i.manage)).map(({values:i})=>i.view)])];return{accessGroups:p,permissions:u}},H={accessGroups:[],permissions:[]},U=C().shape({accessGroups:h().of(b()),permissions:h().of(b())}),ns=({role:e})=>{const o=j(),{notify:d}=x(),{closeSidePanel:p}=O(),{addPermissionsToRoleQuery:t,addAccessGroupsToRoleQuery:u,getAccessGroupQuery:i,getPermissionsQuery:n,removeAccessGroupsFromRoleQuery:l,removePermissionsFromRoleQuery:a}=Q(),{data:g}=n(),s=g?B(g.data):[],{data:f}=i(),c=f?I(k(f.data)):[],{mutateAsync:y}=t,{mutateAsync:T}=u,{mutateAsync:R}=l,{mutateAsync:S}=a,m=_({initialValues:H,validationSchema:U,onSubmit:async r=>{const P=N(r,e,c,s,{addAccessGroups:T,addPermissions:y,removeAccessGroups:R,removePermissions:S});if(!Object.values(P).some(Boolean))return p();try{P.addPermissionsPromise&&P.removePermissionsPromise?(await Promise.all(Object.entries(P).filter(([A,F])=>A!=="addPermissionsPromise"&&F).map(([,A])=>A)),await P.addPermissionsPromise):await Promise.all(Object.values(P).filter(Boolean)),p(),d.success({title:"Role changes have been saved",message:`You modified the role '${e.name}'`})}catch(A){o(A)}}});return E.useEffect(()=>{m.setValues(M(e,c,s))},[e,c.length]),G.jsxs(V.Form,{onSubmit:m.handleSubmit,noValidate:!0,children:[G.jsx(v,{description:"These permissions are for managing the account as a whole. They are not limited to the specified access groups, but instead apply globally.",onPermissionChange:r=>m.setFieldValue("permissions",r),options:s.filter(({global:r})=>r),permissions:m.values.permissions,title:"Global permissions"}),G.jsx(v,{description:"These permissions only apply to selected access groups.",onPermissionChange:r=>m.setFieldValue("permissions",r),options:s.filter(({global:r})=>!r),permissions:m.values.permissions,title:"Permissions"}),G.jsx($,{accessGroupOptions:c,accessGroups:m.values.accessGroups,onAccessGroupChange:r=>{m.setFieldValue("accessGroups",r)}}),G.jsx(D,{submitButtonDisabled:m.isSubmitting,submitButtonText:"Save changes"})]})};export{ns as default};

import{o as g,p as S,f as w,q as x,s as v,h as q,k as m,G as L,j as n,g as r}from"./index-D6VckuHd.js";import{F as R}from"./FileInput-C_HiWnQU.js";import{S as N}from"./SidePanelFormButtons-BmXQ9T7n.js";import{u as P}from"./index-Dna3AOzW.js";import{u as j}from"./WslInstancesHeader-CcL34G39.js";import"./SidePanelFormButtons.module-C5v714vX.js";import"./usePageParams-D-1GJFJQ.js";import"./TablePagination-LU4hETMf.js";import"./TablePaginationBase-ma4DISjg.js";import"./StatusFilter-EXU2kFV8.js";import"./TableFilter-xFcwvKYK.js";import"./TableFilterChips-GgNMVMYl.js";import"./useFetchOld-BeX7bBrr.js";import"./NoData-PTgT8zVR.js";import"./useInstances-C6zjQpuE.js";import"./HeaderWithSearch-Bmg3zv6y.js";const B=[/^ubuntu$/,/^ubuntu-preview$/,/^ubuntu-[0-9]{2}\.[0-9]{2}$/],A=1,C=o=>{if(o)return new Promise((a,u)=>{const i=new FileReader;i.readAsDataURL(o),i.onload=()=>a(i.result),i.onerror=c=>u(c)})},J=()=>{const{instanceId:o}=g(),a=S(),{closeSidePanel:u}=w(),{notify:i}=x(),{createChildInstanceQuery:c,getWslInstanceNamesQuery:p}=j(),{openActivityDetails:f}=P(),{data:l,isLoading:b}=p(),{mutateAsync:y}=c,e=v({initialValues:{instanceType:"Ubuntu",cloudInit:null,instanceName:"",rootfs:""},validationSchema:q({instanceType:m().required("This field is required"),cloudInit:L().nullable().test("file-size","File size must be less than 1MB",t=>t?t.size===void 0?!1:t.size<=A*1024*1024:!0),instanceName:m().when("instanceType",{is:"custom",then:t=>t.required("This field is required").test("not-match-reserved-patterns","Instance name cannot match 'ubuntu', 'ubuntu-preview', or 'ubuntu-<dd>.<dd>'",s=>!B.some(d=>d.test(s.toLowerCase())))}),rootfs:m().url().when("instanceType",{is:"custom",then:t=>t.required("This field is required")})}),onSubmit:async t=>{try{const s=await C(t.cloudInit),d=s?s.split(",")[1]:void 0,{data:T}=await y({parent_id:parseInt(o??""),computer_name:t.instanceType==="custom"?t.instanceName:t.instanceType,rootfs_url:t.instanceType==="custom"?t.rootfs:void 0,cloud_init:d});u(),i.success({message:"You queued a new WSL instance to be installed",actions:[{label:"View details",onClick:()=>f(T)}]})}catch(s){a(s)}}}),I=[...((l==null?void 0:l.data)??[]).map(({label:t,name:s})=>({label:t,value:s}))||[],{label:"Custom",value:"custom"}],h=async t=>{await e.setFieldValue("cloudInit",t[0])},F=async()=>{await e.setFieldValue("cloudInit",null)};return n.jsxs(r.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[n.jsx(r.Select,{label:"Instance type",required:!0,disabled:b,options:I,...e.getFieldProps("instanceType"),error:e.touched.instanceType&&e.errors.instanceType?e.errors.instanceType:void 0}),e.values.instanceType==="custom"&&n.jsxs(n.Fragment,{children:[n.jsx(r.Input,{label:"Instance name",type:"text",required:!0,...e.getFieldProps("instanceName"),error:e.touched.instanceName&&e.errors.instanceName?e.errors.instanceName:void 0}),n.jsx(r.Input,{label:"Rootfs URL",type:"text",required:!0,...e.getFieldProps("rootfs"),error:e.touched.rootfs&&e.errors.rootfs?e.errors.rootfs:void 0})]}),n.jsx(R,{label:"Cloud-init",accept:".yaml",...e.getFieldProps("cloudInit"),onFileRemove:F,onFileUpload:h,help:"You can use a cloud-init configuration YAML file under 1MB to register new WSL instances. Cloud-init streamlines the setup by automating installation and configuration tasks.",error:e.touched.cloudInit&&e.errors.cloudInit?e.errors.cloudInit:void 0}),n.jsx(N,{submitButtonDisabled:e.isSubmitting,submitButtonText:"Install",submitButtonAriaLabel:"Install new WSL instance"})]})};export{J as default};

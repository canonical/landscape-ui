import{B as L,K as N,C as v,a9 as w,F as n,y as j,l as C,z as A,J as E,j as s,m as r}from"./index-D55rtZQW.js";import{A as O}from"./AssociationBlock-DINd0b8M.js";import{S as B}from"./SidePanelFormButtons-8pTt-jI_.js";import{u as W}from"./useRoles-Ch4JJvyl.js";import{M as U,R as V,C as $,F as k}from"./constants-CGmSpzVx.js";import{F as D}from"./FileInput-CJXSIQpQ.js";import{u as z}from"./WslInstancesHeader-wGtAlNwM.js";import{u as M}from"./index-pP9a4reS.js";import{C as G}from"./CodeEditor-CAaqk5Q0.js";import"./MultiSelectField-odgsHgGD.js";import"./useInstances-BTRmhquK.js";import"./SidePanelFormButtons.module-D2P5PizG.js";import"./HeaderWithSearch-nulDoU8k.js";import"./PageMain-lHM6uRXW.js";import"./index-C6cbcO2K.js";const Q=()=>L().shape({title:n().required("This field is required"),access_group:n().required("This field is required"),description:n().required("This field is required"),instanceType:n().required("This field is required"),rootfsImage:n().when("instanceType",{is:"custom",then:t=>t.required("This field is required"),otherwise:t=>t.notRequired()}),customImageName:n().when("instanceType",{is:"custom",then:t=>t.required("This field is required").test("not-match-reserved-patterns","Instance name cannot match 'ubuntu', 'ubuntu-preview', or 'ubuntu-<dd>.<dd>'",i=>!V.some(a=>a.test(i.toLowerCase()))),otherwise:t=>t.notRequired()}),cloudInitType:n(),cloudInit:w().nullable().when("cloudInitType",{is:t=>t==="file"||t==="text",then:t=>t.required("This field is required").test("file-size","File size must be less than 1MB",i=>(typeof i=="string"&&(i=f(i)),i?i.size===void 0?!1:i.size<=U*1024*1024:!0)),otherwise:t=>t.notRequired()}),all_computers:v(),tags:N().of(n())}),X=t=>t.action==="add"?{title:"",access_group:"",description:"",instanceType:"",customImageName:"",rootfsImage:"",cloudInitType:"",cloudInit:null,all_computers:!1,tags:[]}:{title:`${t.profile.title} (copy)`,access_group:t.profile.access_group,all_computers:t.profile.all_computers,cloudInit:null,cloudInitType:"",description:t.profile.description,tags:t.profile.tags,customImageName:t.profile.image_source?t.profile.image_name:"",instanceType:t.profile.image_source?"custom":t.profile.image_name,rootfsImage:t.profile.image_source||""},f=t=>{const i=new Blob([t],{type:"application/x-yaml"});return new File([i],"myFile.yaml",{type:"application/x-yaml"})},H=t=>{if(t)return new Promise((i,a)=>{const c=new FileReader;c.readAsDataURL(t),c.onload=()=>i(c.result),c.onerror=u=>a(u)})},J=async t=>{if(t===null)return;let i;typeof t=="string"?i=f(t):i=t;const a=await H(i);return a?a.split(",")[1]:void 0},K="_block_zzdrk_1",Z={block:K},p={add:{notificationAction:"added",ariaLabel:"Add a new WSL profile",buttonLabel:"Add WSL profile"},duplicate:{notificationAction:"duplicated",ariaLabel:"Duplicate WSL profile",buttonLabel:"Duplicate"}},ge=t=>{const i=j(),{closeSidePanel:a}=C(),{notify:c}=A(),{getAccessGroupQuery:u}=W(),{getWslInstanceNamesQuery:g}=z(),{createWslProfileQuery:I}=M(),{mutateAsync:b}=I,{data:d}=u(),{data:m,isLoading:y}=g(),h=((m==null?void 0:m.data)??[]).map(({label:o,name:l})=>({label:o,value:l}))||[],T=[{label:"Select",value:""},...h,{label:"From URL",value:"custom"}],_=(d==null?void 0:d.data.map(({name:o,title:l})=>({label:l,value:o})))??[],F=[{label:"Select access group",value:""},..._],S=async o=>{try{const l=await J(e.values.cloudInit),R=(await b({title:o.title,access_group:o.access_group,description:o.description,image_name:o.instanceType==="custom"?o.customImageName:o.instanceType,image_source:o.rootfsImage,cloud_init_contents:l,all_computers:o.all_computers,tags:o.tags})).data.computers.constrained.length;a();const q=t.action==="add"?o.title:t.profile.title;c.success({title:`Profile "${q}" ${p[t.action].notificationAction} successfully`,message:`It has been associated with ${R} instances`})}catch(l){i(l)}},e=E({initialValues:X(t),onSubmit:S,validationSchema:Q()}),x=async o=>{await e.setFieldValue("cloudInit",o[0])},P=async()=>{await e.setFieldValue("cloudInit",null)};return s.jsxs(r.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[s.jsx(r.Input,{type:"text",label:"Name",required:!0,...e.getFieldProps("title"),error:e.touched.title&&e.errors.title?e.errors.title:void 0}),s.jsx(r.Input,{type:"text",label:"Description",required:!0,...e.getFieldProps("description"),error:e.touched.description&&e.errors.description?e.errors.description:void 0}),s.jsx(r.Select,{label:"Access group","aria-label":"Access group",required:!0,options:F,...e.getFieldProps("access_group"),error:e.touched.access_group&&e.errors.access_group?e.errors.access_group:void 0}),s.jsxs("div",{className:Z.block,children:[(e.values.instanceType!==""||e.values.cloudInitType!=="")&&s.jsx(r.Notification,{severity:"caution",title:"Warning",children:s.jsx("span",{children:"Once the profile is added, you cannot modify the RootFS image or Cloud-init file."})}),s.jsx(r.Select,{label:"RootFS image",disabled:y,"aria-label":"RootFS image",options:T,required:!0,...e.getFieldProps("instanceType"),error:e.touched.instanceType&&e.errors.instanceType?e.errors.instanceType:void 0}),e.values.instanceType==="custom"&&s.jsxs(s.Fragment,{children:[s.jsx(r.Input,{label:"Image name",type:"text",...e.getFieldProps("customImageName"),error:e.touched.customImageName&&e.errors.customImageName?e.errors.customImageName:void 0}),s.jsx(r.Input,{type:"text",label:"RootFS image URL",...e.getFieldProps("rootfsImage"),error:e.touched.rootfsImage&&e.errors.rootfsImage?e.errors.rootfsImage:void 0,help:"The file path must be reachable by the affected WSL instances"})]}),s.jsx(r.Select,{label:"Cloud-init","aria-label":"Cloud-init",options:$,...e.getFieldProps("cloudInitType"),error:e.touched.cloudInitType&&e.errors.cloudInitType?e.errors.cloudInitType:void 0}),e.values.cloudInitType==="file"&&s.jsx(D,{label:"Upload cloud-init",labelClassName:"u-off-screen",accept:".yaml",...e.getFieldProps("cloudInit"),onFileRemove:P,onFileUpload:x,help:k,error:e.touched.cloudInit&&e.errors.cloudInit?e.errors.cloudInit:void 0}),e.values.cloudInitType==="text"&&s.jsx(G,{label:"Cloud init configuration",onChange:o=>{e.setFieldValue("cloudInit",o??"")},value:e.values.cloudInit??"",language:"yaml",defaultValue:"# paste cloud-init config here",error:e.touched.cloudInit&&e.errors.cloudInit?e.errors.cloudInit:void 0})]}),s.jsx(O,{formik:e}),s.jsx(B,{submitButtonText:p[t.action].buttonLabel,submitButtonAriaLabel:p[t.action].ariaLabel,submitButtonDisabled:e.isSubmitting})]})};export{ge as default};

const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-eevRIhCK.js","assets/index-_GBNEgML.js","assets/index-D8C4EmL5.css","assets/useGPGKeys-DBayXIHF.js","assets/tests-DFnZqbNV.js","assets/SidePanelFormButtons-DYZse7eg.js","assets/SidePanelFormButtons.module-CcPyiogC.js","assets/SidePanelFormButtons-DP4HE5AU.css","assets/PageMain-Dp-fNxq8.js","assets/PageMain-C_v2-kHh.css","assets/constants-CmAirV7h.js"])))=>i.map(i=>d[i]);
import{x as P,a5 as g,j as e,ac as b,i,t as c,w as f,c as d,E as h,a3 as x}from"./index-_GBNEgML.js";import{P as j,a as _,b as k}from"./PageMain-Dp-fNxq8.js";import{L as v}from"./constants-CmAirV7h.js";import{u as p}from"./useGPGKeys-DBayXIHF.js";const C=({gpgKey:a})=>{const s=P(),{removeGPGKeyQuery:n}=p(),{value:t,setTrue:o,setFalse:r}=g(),{mutateAsync:u,isPending:l}=n,y=async()=>{try{await u({name:a.name})}catch(G){s(G)}finally{r()}};return e.jsxs(e.Fragment,{children:[e.jsx(b,{toggleAriaLabel:`${a.name} GPG key actions`,destructiveActions:[{icon:i.ICONS.delete,label:"Remove","aria-label":`Remove ${a.name} GPG key`,onClick:o}]}),t&&e.jsx(i.ConfirmationModal,{close:r,title:`Deleting ${a.name} GPG key`,confirmButtonLabel:"Delete",confirmButtonAppearance:"negative",confirmButtonLoading:l,confirmButtonDisabled:l,onConfirm:y,children:e.jsx("p",{children:"Are you sure? This action is permanent and cannot be undone."})})]})},L="_fingerprint_wf9ay_1",w="_accessType_wf9ay_10",m={fingerprint:L,accessType:w},A=a=>{const s={};switch(a.column.id){case"name":s.role="rowheader";break;case"has_secret":s["aria-label"]="Access type";break;case"fingerprint":s["aria-label"]="Fingerprint";break;case"actions":s["aria-label"]="Actions";break}return s},M=({items:a})=>{const s=c.useMemo(()=>a,[a.length]),n=c.useMemo(()=>[{accessor:"name",Header:"Name"},{accessor:"has_secret",Header:"Access type",className:m.accessType,Cell:({row:t})=>t.original.has_secret?"Private":"Public"},{accessor:"fingerprint",Header:"Fingerprint",className:m.fingerprint},{...v,Cell:({row:t})=>e.jsx(C,{gpgKey:t.original})}],[s]);return e.jsx(i.ModularTable,{columns:n,data:s,getCellProps:A,emptyMsg:"You have no GPG keys yet."})},S=c.lazy(async()=>x(()=>import("./index-eevRIhCK.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10])).then(a=>({default:a.NewGPGKeyForm}))),T=()=>{const{setSidePanelContent:a}=f(),{getGPGKeysQuery:s}=p(),{data:n,isLoading:t}=s(),o=n?.data??[],r=()=>{a("Import GPG key",e.jsx(c.Suspense,{fallback:e.jsx(d,{}),children:e.jsx(S,{})}))};return e.jsxs(j,{children:[e.jsx(_,{title:"GPG keys",actions:[e.jsx(i.Button,{appearance:"positive",onClick:r,type:"button","aria-label":"Import GPG key",children:"Import key"},"new-key-button")]}),e.jsxs(k,{children:[t&&e.jsx(d,{}),!t&&o.length===0&&e.jsx(h,{title:"No GPG keys found",icon:"connected",body:e.jsxs(e.Fragment,{children:[e.jsx("p",{className:"u-no-margin--bottom",children:"You haven't added any GPG keys yet."}),e.jsx("a",{href:"https://ubuntu.com/landscape/docs/repositories",target:"_blank",rel:"nofollow noopener noreferrer",children:"How to manage GPG keys in Landscape"})]}),cta:[e.jsx(i.Button,{appearance:"positive",onClick:r,type:"button","aria-label":"Import GPG key",children:"Import key"},"table-add-new-mirror")]}),!t&&o.length>0&&e.jsx(M,{items:o})]})]})},E=Object.freeze(Object.defineProperty({__proto__:null,default:T},Symbol.toStringTag,{value:"Module"}));export{M as G,E as i};

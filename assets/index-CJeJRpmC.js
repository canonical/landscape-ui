import{e as y,f as A,g as T,B as f,K as j,F as c,a7 as i,r as P,l as w,y as I,J as E,j as a,m as o}from"./index-CGM03hee.js";import{C as R}from"./CodeEditor-ByjRqXsE.js";import{S as V}from"./SidePanelFormButtons-QRtzN-Cq.js";import{u as _}from"./useRoles-iiMs_g-o.js";import{g as p}from"./formikErrors-Bw8iTXYS.js";import{u as q,S as D}from"./ScriptFormAttachments-D9e3O6IT.js";import{D as k,h as B,e as N,r as L}from"./ScriptsTabs-DxCV5EzW.js";import"./index-DBYWjrl1.js";import"./SidePanelFormButtons.module-D2P5PizG.js";import"./TruncatedCell-DCUojxvy.js";import"./HeaderWithSearch-Clw8dh9l.js";import"./SingleInstanceTabs.module-Cm1BYFZQ.js";const O=()=>{const r=y(),l=A(),{mutateAsync:u,isPending:m}=T({mutationKey:["scripts","create"],mutationFn:async h=>r.get("CreateScript",{params:h}),onSuccess:async()=>l.invalidateQueries({queryKey:["scripts"]})});return{createScript:u,isCreatingScript:m}},$={title:"",code:"",access_group:"",attachments:{first:null,second:null,third:null,fourth:null,fifth:null},attachmentsToRemove:[]},M=()=>f().shape({title:c().required("This field is required"),access_group:c().nullable(),code:c().test({name:"required",message:"This field is required",test:r=>!!r}),attachments:f().shape({first:i().nullable(),second:i().nullable(),third:i().nullable(),fourth:i().nullable(),fifth:i().nullable()}),attachmentsToRemove:j().of(c())}),ae=()=>{const r=P.useRef(null),{closeSidePanel:l}=w(),u=I(),{getAccessGroupQuery:m}=_(),{createScript:h}=O(),{createScriptAttachment:g}=q(),{data:d}=m(),b=((d==null?void 0:d.data)??[]).map(t=>({label:t.title,value:t.name})),S=[{label:"Select access group",value:""},...b],x=async t=>{const n=Object.values(t.attachments).filter(s=>s!==null);try{const s=await h(B(t));n.length&&await Promise.all(await N({attachments:n,createScriptAttachment:g,script_id:s.data.id})),l()}catch(s){u(s)}},e=E({initialValues:$,validationSchema:M(),onSubmit:x}),C=async({target:{files:t}})=>{if(!t)return;const[n]=t,s=e.setFieldValue("code",await n.text());if(e.values.title){await s;return}await Promise.all([e.setFieldValue("title",L(n.name)),s])},F=async t=>{await e.setFieldValue("code",t)},v=()=>{var t;return(t=r.current)==null?void 0:t.click()};return a.jsxs(o.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[a.jsx(o.Input,{type:"text",label:"Title",required:!0,...e.getFieldProps("title"),error:e.touched.title&&e.errors.title?e.errors.title:void 0}),a.jsx("input",{ref:r,className:"u-hide",type:"file",onChange:C}),a.jsx(R,{label:"Code",value:e.values.code,onChange:F,error:p(e,"code"),required:!0,defaultValue:k,headerContent:a.jsxs(o.Button,{className:"u-no-margin--bottom",appearance:"base",hasIcon:!0,onClick:v,type:"button",children:[a.jsx(o.Icon,{name:"upload"}),a.jsx("span",{children:"Populate from file"})]})}),a.jsx(o.Select,{label:"Access group",...e.getFieldProps("access_group"),options:S,error:p(e,"access_group")}),a.jsxs(a.Fragment,{children:[a.jsx("h5",{children:"List of attachments"}),a.jsx("p",{className:"u-text--muted",children:"Attachments that will be sent along with the script. You can attach up to 5 files, for a maximum of 1.00MB. Filenames must be unique. On the client, the attachments will be placed in the directory whose name is accessible through the environment variable LANDSCAPE_ATTACHMENTS. They'll be deleted once the script has been run."})]}),a.jsx(D,{attachments:e.values.attachments,attachmentsToRemove:e.values.attachmentsToRemove,getFileInputError:t=>p(e,["attachments",t]),initialAttachments:[],onFileInputChange:t=>async n=>{var s;return e.setFieldValue(`attachments.${t}`,((s=n.target.files)==null?void 0:s[0])??null)},onInitialAttachmentDelete:t=>{e.setFieldValue("attachmentsToRemove",[...e.values.attachmentsToRemove,t])}}),a.jsx(V,{submitButtonText:"Create script",submitButtonDisabled:e.isSubmitting})]})};export{ae as default};

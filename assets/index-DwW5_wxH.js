import{H as S,J as l,K as C,M as R,w as g,A as k,O as T,m as F,B as N,Y as B,C as P,j as a,n as t,o as D}from"./index-CUcI3xGE.js";import{u as V}from"./useInstances-Do8Np3HW.js";import{u as E}from"./index-0ir6X34U.js";import{U as z}from"./constants-Dwl1JGyb.js";import"./PageMain-D0KM0h1l.js";import"./useUsns-cZ5YThGO.js";import"./helpers-DfbOeoIc.js";import"./SingleInstanceTabs.module-Cm1BYFZQ.js";const U=S().shape({deliver_immediately:l(),randomize_delivery:l(),deliver_delay_window:R().min(0,"Delivery delay must be greater than or equal to 0"),deliver_after:C().test({test:n=>n?g(n).isValid():!0,message:"You have to enter a valid date and time"}),upgrade_and_restart:l()}),G={deliver_immediately:!0,randomize_delivery:!1,deliver_delay_window:0,deliver_after:"",upgrade_and_restart:!1},L="To save patches, upgrade your kernel and then Restart. If you Restart without upgrading, you will lose patches until Livepatch automatically applies them again.",M="_radioGroup_1yu2c_1",O="_marginTop_1yu2c_6",o={radioGroup:M,marginTop:O},X=({showNotification:n,instanceName:s,newKernelVersionId:c})=>{const h=k(),{instanceId:u}=T(),{closeSidePanel:d}=F(),{notify:m}=N(),{restartInstanceQuery:f}=V(),{upgradeKernelQuery:w}=E(),{openActivityDetails:p}=B(),{mutateAsync:b,isPending:y}=f,{mutateAsync:I,isPending:v}=w,e=P({initialValues:G,validationSchema:U,onSubmit:async i=>{try{i.upgrade_and_restart?await x():await j(i)}catch(r){h(r)}}}),_=async i=>{const r=i.currentTarget.value==="true";await e.setFieldValue("deliver_immediately",r),r||await e.setFieldValue("deliver_after",g().toISOString().slice(0,16))},A=async()=>{await e.setFieldValue("upgrade_and_restart",!0),e.handleSubmit()},x=async()=>{const{data:i}=await I({id:Number(u),kernel_package_id:Number(c),reboot_after:!0});d(),m.success({title:`You queued kernel upgrade for "${s}"`,message:z,actions:[{label:"View details",onClick:()=>p(i)}]})},j=async i=>{const{data:r}=await b({id:Number(u),deliver_after:i.deliver_after,deliver_delay_window:i.deliver_delay_window});d(),m.success({title:`You queued "${s}" to be restarted.`,message:`Instance "${s}" will be restarted and is queued in Activities`,actions:[{label:"View details",onClick:()=>p(r)}]})};return a.jsxs(t.Form,{onSubmit:e.handleSubmit,children:[n&&a.jsx(t.Notification,{title:"Restart recommended",severity:"caution",children:L}),a.jsx("strong",{children:"Delivery time"}),a.jsxs("div",{className:o.radioGroup,children:[a.jsx(t.Input,{type:"radio",label:"As soon as possible",name:"deliver_immediately",value:"true",onChange:_,checked:e.values.deliver_immediately}),a.jsx(t.Input,{type:"radio",label:"Scheduled",name:"deliver_immediately",value:"false",onChange:_,checked:!e.values.deliver_immediately})]}),!e.values.deliver_immediately&&a.jsx(t.Input,{type:"datetime-local",label:"Deliver after",labelClassName:"u-off-screen",...e.getFieldProps("deliver_after"),error:e.touched.deliver_after&&e.errors.deliver_after?e.errors.deliver_after:void 0}),a.jsx("strong",{className:D(o.marginTop),children:"Randomise delivery over a time window"}),a.jsxs("div",{className:o.radioGroup,children:[a.jsx(t.Input,{type:"radio",label:"No",...e.getFieldProps("randomize_delivery"),onChange:async()=>{await e.setFieldValue("randomize_delivery",!1),await e.setFieldValue("deliver_delay_window",0)},checked:!e.values.randomize_delivery}),a.jsx(t.Input,{type:"radio",label:"Yes",...e.getFieldProps("randomize_delivery"),onChange:async()=>await e.setFieldValue("randomize_delivery",!0),checked:e.values.randomize_delivery})]}),e.values.randomize_delivery&&a.jsx(t.Input,{type:"number",inputMode:"numeric",min:0,label:"Delivery delay window",labelClassName:"u-off-screen",help:"Time in minutes",...e.getFieldProps("deliver_delay_window"),error:e.touched.deliver_delay_window&&e.errors.deliver_delay_window?e.errors.deliver_delay_window:void 0}),a.jsxs("div",{className:"form-buttons",children:[a.jsx(t.Button,{type:"button",appearance:"base",onClick:d,children:"Cancel"}),n&&c&&a.jsx(t.ConfirmationButton,{type:"button",confirmationModalProps:{title:"Upgrading kernel and restarting instance",children:a.jsx("p",{children:"Are you sure? This action will upgrade the kernel and restart the instance."}),confirmButtonLabel:"Upgrade and Restart",confirmButtonAppearance:"negative",confirmButtonLoading:v,confirmButtonDisabled:v,onConfirm:A},children:"Upgrade and Restart"}),a.jsx(t.ConfirmationButton,{type:"button",appearance:"negative",confirmationModalProps:{title:"Restarting instance",children:a.jsx("p",{children:"Are you sure? This action will restart the instance."}),confirmButtonLabel:"Restart",confirmButtonAppearance:"negative",confirmButtonLoading:y,confirmButtonDisabled:y,onConfirm:()=>e.handleSubmit()},children:"Restart"})]})]})};export{X as default};

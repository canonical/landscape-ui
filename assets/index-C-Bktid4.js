import{d as F,k as T,l as v,G as g,s as w,q as S,t as q,H as x,v as C,z as P,f as m,at as R,j as i,e as c}from"./index-CmmfIHlE.js";import{F as N}from"./FileInput-B74s4_B1.js";import{S as j}from"./SidePanelFormButtons-DmuqWUSv.js";import{u as A}from"./useGetWslInstanceTypes-CNale8tb.js";import"./SidePanelFormButtons.module-CcPyiogC.js";const B=()=>{const a=F(),o=T(),{isPending:r,mutateAsync:s}=v({mutationFn:async({parent_id:u,...l})=>a.post(`computers/${u}/children`,l),onSuccess:async()=>Promise.all([o.invalidateQueries({queryKey:["wsl-hosts"]}),o.invalidateQueries({queryKey:["instances"]})])});return{isCreatingWslInstance:r,createWslInstance:s}},W=[/^ubuntu$/,/^ubuntu-preview$/,/^ubuntu-[0-9]{2}\.[0-9]{2}$/],E=1,L=a=>{if(a)return new Promise((o,r)=>{const s=new FileReader;s.readAsDataURL(a),s.onload=()=>{o(s.result)},s.onerror=u=>{r(u)}})},D=()=>{const{instanceId:a}=g(),o=w(),{closeSidePanel:r}=S(),{notify:s}=q(),{openActivityDetails:u}=x(),{isGettingWslInstanceTypes:l,wslInstanceTypes:p}=A(),{createWslInstance:y}=B(),e=C({initialValues:{instanceType:"Ubuntu",cloudInit:null,instanceName:"",rootfs:""},validationSchema:P({instanceType:m().required("This field is required"),cloudInit:R().nullable().test("file-size","File size must be less than 1MB",t=>t?t.size===void 0?!1:t.size<=E*1024*1024:!0),instanceName:m().when("instanceType",{is:"custom",then:t=>t.required("This field is required").test("not-match-reserved-patterns","Instance name cannot match 'ubuntu', 'ubuntu-preview', or 'ubuntu-<dd>.<dd>'",n=>!W.some(d=>d.test(n.toLowerCase())))}),rootfs:m().url().when("instanceType",{is:"custom",then:t=>t.required("This field is required")})}),onSubmit:async t=>{try{const n=await L(t.cloudInit),d=n?n.split(",")[1]:void 0,{data:I}=await y({parent_id:parseInt(a??""),computer_name:t.instanceType==="custom"?t.instanceName:t.instanceType,rootfs_url:t.instanceType==="custom"?t.rootfs:void 0,cloud_init:d});r(),s.success({title:`You have successfully marked ${t.instanceName} to be installed.`,message:"An activity has been queued to install it.",actions:[{label:"View details",onClick:()=>{u(I)}}]})}catch(n){o(n)}}}),b=[...p.map(({label:t,name:n})=>({label:t,value:n}))||[],{label:"Custom",value:"custom"}],f=async t=>{await e.setFieldValue("cloudInit",t[0])},h=async()=>{await e.setFieldValue("cloudInit",null)};return i.jsxs(c.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[i.jsx(c.Select,{label:"Instance type",required:!0,disabled:l,options:b,...e.getFieldProps("instanceType"),error:e.touched.instanceType&&e.errors.instanceType?e.errors.instanceType:void 0}),e.values.instanceType==="custom"&&i.jsxs(i.Fragment,{children:[i.jsx(c.Input,{label:"Instance name",type:"text",required:!0,...e.getFieldProps("instanceName"),error:e.touched.instanceName&&e.errors.instanceName?e.errors.instanceName:void 0}),i.jsx(c.Input,{label:"Rootfs URL",type:"text",required:!0,...e.getFieldProps("rootfs"),error:e.touched.rootfs&&e.errors.rootfs?e.errors.rootfs:void 0})]}),i.jsx(N,{label:"Cloud-init",accept:".yaml",...e.getFieldProps("cloudInit"),onFileRemove:h,onFileUpload:f,help:"You can use a cloud-init configuration YAML file under 1MB to register new WSL instances. Cloud-init streamlines the setup by automating installation and configuration tasks.",error:e.touched.cloudInit&&e.errors.cloudInit?e.errors.cloudInit:void 0}),i.jsx(j,{submitButtonDisabled:e.isSubmitting,submitButtonText:"Create",submitButtonAriaLabel:"Create new WSL instance"})]})};export{D as default};

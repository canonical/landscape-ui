import{o as w,p as F,f as S,q as x,s as _,h as q,k as m,G as L,j as i,g as a}from"./index-F5ixs2NP.js";import{F as R}from"./FileInput-9g8xdon0.js";import{S as N}from"./SidePanelFormButtons-CsLLCRpy.js";import{u as P}from"./index-Be1OeTg7.js";import{u as j}from"./WslInstancesHeader-C7yfVYh_.js";import"./SidePanelFormButtons.module-tJTvEwdD.js";import"./usePageParams-ByN77I-a.js";import"./TablePagination-BrIH39sP.js";import"./TablePaginationBase-CfRQScDE.js";import"./StatusFilter-DZQLeRRj.js";import"./TableFilter-B53U33U0.js";import"./TableFilterChips-5N5Oo-yw.js";import"./useFetchOld-IYQtjqtR.js";import"./NoData-D5--INTl.js";import"./useInstances-ilOChO3j.js";import"./HeaderWithSearch-Dt8LFJia.js";try{let n=typeof window<"u"?window:typeof global<"u"?global:typeof globalThis<"u"?globalThis:typeof self<"u"?self:{},o=new n.Error().stack;o&&(n._sentryDebugIds=n._sentryDebugIds||{},n._sentryDebugIds[o]="f58bcf71-753b-4f3e-b61d-7f2858df05fd",n._sentryDebugIdIdentifier="sentry-dbid-f58bcf71-753b-4f3e-b61d-7f2858df05fd")}catch{}const B=[/^ubuntu$/,/^ubuntu-preview$/,/^ubuntu-[0-9]{2}\.[0-9]{2}$/],D=1,E=n=>{if(n)return new Promise((o,u)=>{const r=new FileReader;r.readAsDataURL(n),r.onload=()=>o(r.result),r.onerror=d=>u(d)})},J=()=>{const{instanceId:n}=w(),o=F(),{closeSidePanel:u}=S(),{notify:r}=x(),{createChildInstanceQuery:d,getWslInstanceNamesQuery:p}=j(),{openActivityDetails:f}=P(),{data:c,isLoading:b}=p(),{mutateAsync:y}=d,e=_({initialValues:{instanceType:"Ubuntu",cloudInit:null,instanceName:"",rootfs:""},validationSchema:q({instanceType:m().required("This field is required"),cloudInit:L().nullable().test("file-size","File size must be less than 1MB",t=>t?t.size===void 0?!1:t.size<=D*1024*1024:!0),instanceName:m().when("instanceType",{is:"custom",then:t=>t.required("This field is required").test("not-match-reserved-patterns","Instance name cannot match 'ubuntu', 'ubuntu-preview', or 'ubuntu-<dd>.<dd>'",s=>!B.some(l=>l.test(s.toLowerCase())))}),rootfs:m().url().when("instanceType",{is:"custom",then:t=>t.required("This field is required")})}),onSubmit:async t=>{try{const s=await E(t.cloudInit),l=s?s.split(",")[1]:void 0,{data:T}=await y({parent_id:parseInt(n??""),computer_name:t.instanceType==="custom"?t.instanceName:t.instanceType,rootfs_url:t.instanceType==="custom"?t.rootfs:void 0,cloud_init:l});u(),r.success({message:"You queued a new WSL instance to be installed",actions:[{label:"View details",onClick:()=>f(T)}]})}catch(s){o(s)}}}),I=[...((c==null?void 0:c.data)??[]).map(({label:t,name:s})=>({label:t,value:s}))||[],{label:"Custom",value:"custom"}],h=async t=>{await e.setFieldValue("cloudInit",t[0])},g=async()=>{await e.setFieldValue("cloudInit",null)};return i.jsxs(a.Form,{onSubmit:e.handleSubmit,noValidate:!0,children:[i.jsx(a.Select,{label:"Instance type",required:!0,disabled:b,options:I,...e.getFieldProps("instanceType"),error:e.touched.instanceType&&e.errors.instanceType?e.errors.instanceType:void 0}),e.values.instanceType==="custom"&&i.jsxs(i.Fragment,{children:[i.jsx(a.Input,{label:"Instance name",type:"text",required:!0,...e.getFieldProps("instanceName"),error:e.touched.instanceName&&e.errors.instanceName?e.errors.instanceName:void 0}),i.jsx(a.Input,{label:"Rootfs URL",type:"text",required:!0,...e.getFieldProps("rootfs"),error:e.touched.rootfs&&e.errors.rootfs?e.errors.rootfs:void 0})]}),i.jsx(R,{label:"Cloud-init",accept:".yaml",...e.getFieldProps("cloudInit"),onFileRemove:g,onFileUpload:h,help:"You can use a cloud-init configuration YAML file under 1MB to register new WSL instances. Cloud-init streamlines the setup by automating installation and configuration tasks.",error:e.touched.cloudInit&&e.errors.cloudInit?e.errors.cloudInit:void 0}),i.jsx(N,{submitButtonDisabled:e.isSubmitting,submitButtonText:"Install",submitButtonAriaLabel:"Install new WSL instance"})]})};export{J as default};

name: Vulnerability Scan

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: "0 2 * * 1" # Run weekly at 2 AM on Monday

permissions:
  contents: read
  packages: write # Required to push to GitHub Container Registry
  issues: write   # Required to create issues on failure

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan-image:
    name: Scan Container Image with Secscan
    needs: build-image
    runs-on: [self-hosted, self-hosted-linux-amd64-jammy-private-endpoint-medium]
    steps:
      - name: Install secscan client
        run: sudo snap install canonical-secscan-client

      - name: Run security scan
        id: secscan
        continue-on-error: true
        run: |
          IMAGE_TO_SCAN="${{ needs.build-image.outputs.image_name }}"
          
          # Run the scan and save the output to a file
          secscan-client --batch submit \
            --ssdlc-product-name "landscape-ui" \
            --ssdlc-cycle "25.10" \
            --ssdlc-product-version "1.17.0" \
            --ssdlc-product-channel "edge" \
            --scanner trivy \
            --type container-image \
            --format oci \
            "$IMAGE_TO_SCAN" \
            --wait-and-print > secscan-results.txt

      - name: Create issue on high/critical findings
        if: steps.secscan.outcome != 'success' || contains(toJSON(cat secscan-results.txt), 'CRITICAL') || contains(toJSON(cat secscan-results.txt), 'HIGH')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Vulnerability scan found high/critical issues or failed." > issue-body.txt
          echo "### Scan Results" >> issue-body.txt
          echo '```' >> issue-body.txt
          cat secscan-results.txt >> issue-body.txt
          echo '```' >> issue-body.txt
          gh issue create --title "High/Critical Vulnerabilities Detected in Landscape UI" --body-file issue-body.txt --label "security"